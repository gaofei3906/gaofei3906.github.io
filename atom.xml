<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-19T10:29:44.029Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>高立飞</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/12/02/JS%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/12/02/JS数组常用方法/</id>
    <published>2018-12-02T05:43:12.657Z</published>
    <updated>2018-09-19T10:29:44.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript字符串常用方法"><a href="#JavaScript字符串常用方法" class="headerlink" title="JavaScript字符串常用方法"></a>JavaScript字符串常用方法</h1><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li><p>所谓数组，就是一堆数据的集合（容器），里面存放各种各样的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br></pre></td></tr></table></figure></li><li><p><code>length</code>属性<br>可以用<code>length</code>属性取得数组(集合)的长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line">arr.length; <span class="comment">// 3  返回3，说明数组有三个元素</span></span><br></pre></td></tr></table></figure></li><li><p>数组下标</p><p>数组中每个元素都有对应的标号指向它，这个标号我们可以称之为<code>下标</code></p><p>下标从0开始，数组中的第1个元素下标为0，第2个元素下标为1，依次类推。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line">arr[<span class="number">0</span>]; <span class="comment">// 'a'</span></span><br><span class="line">arr[<span class="number">1</span>]; <span class="comment">// 'b'</span></span><br><span class="line">arr[<span class="number">2</span>]; <span class="comment">// 'c'</span></span><br></pre></td></tr></table></figure><blockquote><p>当通过不存在的下标获取值则得到一个undefined值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line">arr[<span class="number">4</span>]; <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.join(separator)</span><br></pre></td></tr></table></figure><p>作用：把数组中的每个元素用分隔符separator进行连接起来，返回一个字符串。如果省略了这个参数，默认使用逗号作为分隔符 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.join(<span class="string">'-'</span>) );  <span class="comment">// 'a-b-c'</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.join(<span class="string">''</span>) );  <span class="comment">// 'abc'</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.join() );  <span class="comment">// 'a,b,c'</span></span><br></pre></td></tr></table></figure><h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.pop()</span><br></pre></td></tr></table></figure><p>作用： 将删除arr的最后一个元素，把数组长度减1，并且返回它删除的元素的值。如果数组已经为空，则pop()不改变数组，返回undefined。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( arr.pop() ); <span class="comment">// c</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.pop() ); <span class="comment">// b</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.pop() ); <span class="comment">// a</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.pop() ); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.push(value,...)</span><br></pre></td></tr></table></figure><p>作用：向数组尾部添加一个或多个元素 ，成功返回数组的新长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.push(<span class="string">'d'</span>) ); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.push(<span class="string">'e'</span>,<span class="string">'f'</span>) ); <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//["a", "b", "c", "d", "e", "f"]</span></span><br></pre></td></tr></table></figure><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.unshift(value,...)</span><br></pre></td></tr></table></figure><p>作用：向数组头部添加一个或多个元素 ，成功返回数组的新长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.unshift(<span class="string">'d'</span>) ); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.unshift(<span class="string">'e'</span>,<span class="string">'f'</span>) ); <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["e", "f", "d", "a", "b", "c"]</span></span><br></pre></td></tr></table></figure><h3 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.shift()</span><br></pre></td></tr></table></figure><p>作用：方法shift()将把arr的第—个元素移出数组，b并返回那个元素的值，并且将余下的所有元素前移一位，以填补数组头部的空缺 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.shift(<span class="string">'d'</span>) ); <span class="comment">// 'a'</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["b", "c"]</span></span><br></pre></td></tr></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.sort(callback)</span><br></pre></td></tr></table></figure><p>作用：对数组进行排序，指定d回调函数callback进行排序。</p><p>返回值：对数组的引用。注意，数组在原数组上进行排序，不制作副本。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">14</span>,<span class="number">8</span>,<span class="number">24</span>];</span><br><span class="line">arr.sort( <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> a-b; <span class="comment">// 或return  a&gt;b   </span></span><br><span class="line">&#125;) ;  </span><br><span class="line"><span class="built_in">console</span>.log(arr);  <span class="comment">// [8, 14, 24]  升序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">14</span>,<span class="number">8</span>,<span class="number">24</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> b-a; <span class="comment">//  或return b&gt;a  </span></span><br><span class="line">&#125;) ;  </span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[24, 14, 8] 降序</span></span><br></pre></td></tr></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.slice(start,[,end])</span><br></pre></td></tr></table></figure><p>作用：截取数组长度。从下标start开始，到end（不包括该元素）下标结束，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.slice(<span class="number">2</span>,<span class="number">4</span>)); <span class="comment">// [3,4]</span></span><br></pre></td></tr></table></figure><p>若没有写end结束下标，则截取到数组末尾。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.slice(<span class="number">2</span>)); <span class="comment">// [3,4,5]</span></span><br></pre></td></tr></table></figure><p>若end为负数，则从数组尾部开始截取，即-1指最后一个元素，-2指倒数第二个元素，以此类推 。</p><blockquote><p>注：不包括最后一个元素。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.slice(<span class="number">2</span>,<span class="number">-1</span>)); <span class="comment">// [3,4]</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.slice(<span class="number">2</span>,<span class="number">-2</span>)); <span class="comment">// [3]</span></span><br></pre></td></tr></table></figure><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.toString()</span><br></pre></td></tr></table></figure><p>作用： 把数组转为用逗号连接的字符串表示。类似<code>arr.join()</code>效果一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.toString() ); <span class="comment">// '1,2,3,4,5'</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.join() ); <span class="comment">// '1,2,3,4,5'</span></span><br></pre></td></tr></table></figure><h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.splice(start, deleteCount, value, ...)</span><br></pre></td></tr></table></figure><p>参数</p><ul><li><p>start</p><p>开始插入和(或)删除的数组元素的下标 </p></li><li><p>deleteCount</p><p>从start开始，包括start所指的元素在内要删除的元素个数。这个参数是可选的，如果没有指定它，splice()将删除从start开始到原数组结尾的所有元素。 </p></li><li><p>value</p><p>要插人数组的零个或多个值，从start所指的下标处开始插入 </p></li></ul><p>返回值</p><p>​    如果从arr中删除了元素，返回的是含有被删除的元素的数组。 </p><p>例1：从下标2开始删除后面所有的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.splice(<span class="number">2</span>) ); <span class="comment">// [3,4,5]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">// [1,2]</span></span><br></pre></td></tr></table></figure><p>例2：从下标2开始删除后面的2个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.splice(<span class="number">2</span>,<span class="number">2</span>) ); <span class="comment">// [3,4]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">// [1,2,5]</span></span><br></pre></td></tr></table></figure><p>例3：从下标2开始删除后面的2个元素,同时在start指定的下标2后面加一个元素new</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.splice(<span class="number">2</span>,<span class="number">2</span>,<span class="string">'new'</span>) ); <span class="comment">// [3,4]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">// [1,2,'new',5]</span></span><br></pre></td></tr></table></figure><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.reverse()</span><br></pre></td></tr></table></figure><p>作用：颠倒数组中元素的顺序,返回新的电刀后的数组元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.reverse() ); <span class="comment">// [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><h3 id="isArray"><a href="#isArray" class="headerlink" title="isArray()"></a>isArray()</h3><p>作用：检测一个变量是否是数组。（typeof不行,返回的是object）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) == <span class="string">'[object Array]'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(isArray(arr)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isArray(&#123;&#125;)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>同理：</p><p>​    判断是否是对象使用<code>[object object]</code></p><p>​    是否是字符串 <code>[object string]</code></p><p>​    以此类推</p><h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><p>作用：连接多个数组，返回新的数组 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr1.concat(arr2) ); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach()"></a>foreach()</h3><p>作用：遍历数组元素 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v,key</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//v当前循环的元素 key当前元素的下标</span></span><br><span class="line">    <span class="built_in">console</span>.log(key,v)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 &quot;a&quot;</span><br><span class="line">1 &quot;b&quot;</span><br><span class="line">2 &quot;c&quot;</span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p>作用：过滤数组中的某些元素，在回调函数中设置条件，不满足的都会被过滤掉，返回一个新数组。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = [<span class="number">18</span>,<span class="number">23</span>,<span class="number">28</span>,<span class="number">30</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = age.filter(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//v当前循环的元素</span></span><br><span class="line">    <span class="comment">//返回年龄大于25的元素</span></span><br><span class="line">    <span class="keyword">return</span> v&gt;<span class="number">25</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newArr);<span class="comment">// [28, 30]</span></span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><p>作用：遍历数组，数组里的元素经过指定回调函数进行加工处理。  返回一个新的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = [<span class="number">18</span>,<span class="number">23</span>,<span class="number">28</span>,<span class="number">30</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = age.map(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//给每个元素加10岁</span></span><br><span class="line">    <span class="keyword">return</span> v+<span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [28, 33, 38, 40]</span></span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h3><p>reduce方法有两个参数，第一个参数是一个callback，用于针对数组项的操作；第二个参数则是传入的初始值，这个初始值用于单个数组项的操作。需要注意的是，reduce方法返回值并不是数组，而是返回经过叠加处理后的结果。</p><p>reduce方法最常见的场景就是叠加 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> items = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">sum,item</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//item数组值的每个元素</span></span><br><span class="line">    <span class="comment">//sum每次累加的和</span></span><br><span class="line">    <span class="keyword">return</span> sum+item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> total = items.reduce(callback,<span class="number">0</span>); <span class="comment">//把循环完后的累加结果加0</span></span><br><span class="line"><span class="built_in">console</span>.log(total); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><p>方式有很多种。</p><ul><li>用es6的Set对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</span><br><span class="line"><span class="keyword">var</span> newArr = <span class="built_in">Array</span>.from(set);</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>更骚气的用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = [...new <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>])]</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><ul><li>另indexOf方法来判断，存在返回元素下标，不存在返回-1</li></ul><p>建立一个存放结果的数组，利用indexOf判断是否存在于新数组中，不存在则push到新数组，最后返回新数组 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> unique = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = []; <span class="comment">// 存放已遍历的满足条件的元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">// indexOf()判断当前元素是否已存在</span></span><br><span class="line">        <span class="keyword">if</span> (n.indexOf(arr[i]) == <span class="number">-1</span>) n.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log( unique(arr) ); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>如果想arr.unique()这样调用，则需要把此方法加上Array的原型对象上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = []; <span class="comment">// 存放已遍历的满足条件的元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="comment">// indexOf()判断当前元素是否已存在</span></span><br><span class="line">        <span class="keyword">if</span> (n.indexOf(<span class="keyword">this</span>[i]) == <span class="number">-1</span>) n.push(<span class="keyword">this</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">6</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.unique() );  <span class="comment">// [1, 2, 3, 6]</span></span><br></pre></td></tr></table></figure><h3 id="数组中是否存在于某个值"><a href="#数组中是否存在于某个值" class="headerlink" title="数组中是否存在于某个值"></a>数组中是否存在于某个值</h3><p>可以用indexOf方法来判断，存在返回元素下标，不存在返回-1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inArray</span>(<span class="params">value,arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.indexOf(value)!== <span class="number">-1</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log( inArray(<span class="number">2</span>,arr) ); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log( inArray(<span class="number">4</span>,arr) ); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>由于笔者才学疏浅，文章有错误的地方望大家批评指正，一起学习进步。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript字符串常用方法&quot;&gt;&lt;a href=&quot;#JavaScript字符串常用方法&quot; class=&quot;headerlink&quot; title=&quot;JavaScript字符串常用方法&quot;&gt;&lt;/a&gt;JavaScript字符串常用方法&lt;/h1&gt;&lt;h3 id=&quot;数组&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/12/02/JS%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/12/02/JS字符串常用方法/</id>
    <published>2018-12-02T05:43:12.656Z</published>
    <updated>2018-09-19T10:29:44.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript字符串常用方法"><a href="#JavaScript字符串常用方法" class="headerlink" title="JavaScript字符串常用方法"></a>JavaScript字符串常用方法</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li><p>字符串就是一个或多个排列在一起的字符，放在单引号或双引号之中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abc'</span></span><br><span class="line"><span class="string">"abc"</span></span><br></pre></td></tr></table></figure></li><li><p><code>length</code>属性<br>js里的字符串类似于数组，都是一个一个字符拼凑在一起组成的，因此可以用<code>length</code>属性取得字符串的长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"hello"</span></span><br><span class="line">str.length;  <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="字符串常用的一些方法"><a href="#字符串常用的一些方法" class="headerlink" title="字符串常用的一些方法"></a>字符串常用的一些方法</h2><h3 id="1-charAt"><a href="#1-charAt" class="headerlink" title="1. charAt()"></a>1. charAt()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.charAt(n)</span><br></pre></td></tr></table></figure><p>作用： 返回字符串的第 n 个字符，如果不在 0~str.length-1之间，则返回一个空字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"javascript"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.charAt(<span class="number">5</span>) ); <span class="comment">// 'c'</span></span><br><span class="line"><span class="built_in">console</span>.log( str.charAt(<span class="number">15</span>) ); <span class="comment">// ''</span></span><br></pre></td></tr></table></figure><h3 id="2-indexOf"><a href="#2-indexOf" class="headerlink" title="2. indexOf()"></a>2. indexOf()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">indexOf(substr[,start])</span><br></pre></td></tr></table></figure><p>作用： 返回 substr 在字符串 str 中首次出现的位置,从 start 位置开始查找，如果不存在，则返回 -1。<br>start可以是任意整数，默认值为 0。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"javascript"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.indexOf(<span class="string">'s'</span>) );   <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log( str.indexOf(<span class="string">'php'</span>,<span class="number">5</span>) ); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log( str.indexOf(<span class="string">'a'</span>,<span class="number">2</span>) );  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="3-lastIndexOf"><a href="#3-lastIndexOf" class="headerlink" title="3. lastIndexOf()"></a>3. lastIndexOf()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lastIndexOf(substr[,start])</span><br></pre></td></tr></table></figure><p>作用： 返回 substr 在字符串 str 中最后出现的位置,从 start 位置 向前开始查找，如果不存在，则返回 -1。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="string">'javascript'</span>.lastIndexOf(<span class="string">'a'</span>) ); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'javascript'</span>.lastIndexOf(<span class="string">'o'</span>) ); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h3 id="4-substring"><a href="#4-substring" class="headerlink" title="4. substring()"></a>4. substring()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.substring(start[, end])</span><br></pre></td></tr></table></figure><p>作用：返回从 start 到 end（不包括）之间的字符，start、end均为 非负整数。若结束参数(end)省略，则表示从start位置一直截取到最后。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'javascript'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.substring(<span class="number">1</span>, <span class="number">4</span>) ); <span class="comment">//"ava"</span></span><br><span class="line"><span class="built_in">console</span>.log( str.substring(<span class="number">1</span>) );  <span class="comment">// "avascript"</span></span><br></pre></td></tr></table></figure><h3 id="5-slice"><a href="#5-slice" class="headerlink" title="5. slice()"></a>5. slice()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.slice(start[,end])</span><br></pre></td></tr></table></figure><p>作用：返回从 start 到 end （不包括）之间的字符，可传负值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'this is awesome'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.slice(<span class="number">1</span>, <span class="number">3</span>) );  <span class="comment">// "hi"</span></span><br><span class="line"><span class="built_in">console</span>.log( str.slice(<span class="number">10</span>, <span class="number">-1</span>) );  <span class="comment">// "esom"</span></span><br><span class="line"><span class="built_in">console</span>.log( str.slice(<span class="number">10</span>, <span class="number">-2</span>) );  <span class="comment">// "eso"</span></span><br></pre></td></tr></table></figure><blockquote><p>从最右边起，字母e为-1，m为-2,依次类推。</p></blockquote><h3 id="6-substr"><a href="#6-substr" class="headerlink" title="6. substr()"></a>6. substr()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.slice(start[,length])</span><br></pre></td></tr></table></figure><p>作用：返回 str 中从指定位置开始到指定长度的子字符串，start可为负值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"javascript"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.substr(<span class="number">5</span>, <span class="number">3</span>) );  <span class="comment">// "cri"</span></span><br><span class="line"><span class="built_in">console</span>.log( str.substr(<span class="number">-4</span>, <span class="number">2</span>) );  <span class="comment">// "ri"</span></span><br></pre></td></tr></table></figure><h3 id="7-replace"><a href="#7-replace" class="headerlink" title="7. replace()"></a>7. replace()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.replace(regexp|substr, newSubStr|<span class="function"><span class="keyword">function</span>)</span></span><br></pre></td></tr></table></figure><p>作用：替换 str 的子字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通替换</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"i love you"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.replace(<span class="string">'love'</span>,<span class="string">'hate'</span>) );  <span class="comment">// "i hate you"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//正则替换</span></span><br><span class="line"><span class="keyword">var</span> tel = <span class="string">'13534566789'</span>; </span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d&#123;3&#125;)\d&#123;4&#125;(\d&#123;4&#125;)/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log( tel.replace(reg,<span class="string">"$1****$2"</span>) );  <span class="comment">// 135****6789</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//驼峰转换</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strCovert</span>(<span class="params">css</span>)</span>&#123;</span><br><span class="line"><span class="comment">//定义一个正则尽可能找到我们要替换的内容</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/-([a-z])/g</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = css.replace(reg,<span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">0</span>,$<span class="number">1</span></span>)</span>&#123;</span><br><span class="line"><span class="comment">//$0:代表正则匹配的结果</span></span><br><span class="line"><span class="comment">//$1:代表正则匹配的第1个括号中的结果</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'$0:'</span>,$<span class="number">0</span>); <span class="comment">// -b -c </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'$1:'</span>,$<span class="number">1</span>); <span class="comment">// b  c </span></span><br><span class="line"><span class="keyword">return</span> $<span class="number">1.</span>toUpperCase();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> newStr; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> css = <span class="string">'border-bottom-color'</span>; </span><br><span class="line"><span class="built_in">console</span>.log(strCovert(css)); <span class="comment">//"borderBottomColor"</span></span><br></pre></td></tr></table></figure><h3 id="8-search"><a href="#8-search" class="headerlink" title="8. search()"></a>8. search()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.search(regexp)</span><br></pre></td></tr></table></figure><p>作用： 查找 str 与一个正则表达式是否匹配。如果匹配成功，则返回正则表达式在字符串中首次匹配项的索引,否则返回 -1。如果参数传入的是一个非正则表达式对象，则会使用 new RegExp(obj) 隐式地将其转换为正则表达式对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'I love JavaScript!'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.search(<span class="regexp">/java/</span>) ); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log( str.search(<span class="regexp">/Java/</span>) ); <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log( str.search(<span class="regexp">/java/i</span>) ); <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log( str.search(<span class="string">'Java'</span>) ); <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><h3 id="9-match"><a href="#9-match" class="headerlink" title="9. match()"></a>9. match()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.match(regexp)</span><br></pre></td></tr></table></figure><p>作用：返回一个包含匹配结果的数组，如果没有匹配项，则返回 null。如果参数传入的是一个非正则表达式对象，则会使用 new RegExp(obj) 隐式地将其转换为正则表达式对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'Javascript java'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.match(<span class="regexp">/Java/</span>) ); <span class="comment">// ["Java"]</span></span><br><span class="line"><span class="built_in">console</span>.log( str.match(<span class="regexp">/Java/g</span>) ); <span class="comment">// ["Java"]</span></span><br><span class="line"><span class="built_in">console</span>.log( str.match(<span class="regexp">/Java/gi</span>) ); <span class="comment">// ["java", "Java"]</span></span><br><span class="line"><span class="built_in">console</span>.log( str.match(<span class="regexp">/ab/g</span>) ); <span class="comment">// null</span></span><br></pre></td></tr></table></figure><h3 id="10-split"><a href="#10-split" class="headerlink" title="10. split()"></a>10. split()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.split([delimiter][, limit])</span><br></pre></td></tr></table></figure><p>作用：返回一个数组，分隔符delimiter 可以是一个字符串或正则表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Hello?World!"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str .split() ); <span class="comment">// ["Hello?World!"]</span></span><br><span class="line"><span class="built_in">console</span>.log( str.split(<span class="string">'?'</span>) ); <span class="comment">// ["Hello", "World!"]</span></span><br><span class="line"><span class="built_in">console</span>.log( str.split(<span class="string">''</span>) ); <span class="comment">// ["H", "e", "l", "l", "o", "?", "W", "o", "r", "l", "d", "!"]</span></span><br><span class="line"><span class="built_in">console</span>.log( str.split(<span class="string">''</span>,<span class="number">5</span>) ); <span class="comment">// ["H", "e", "l", "l", "o"]</span></span><br><span class="line"><span class="built_in">console</span>.log( str.split(<span class="regexp">/\?/</span>) ); <span class="comment">// ["Hello", "World!"]</span></span><br></pre></td></tr></table></figure><h3 id="11-trim"><a href="#11-trim" class="headerlink" title="11. trim()"></a>11. trim()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.trim()</span><br></pre></td></tr></table></figure><p>作用：去除 str 开头和结尾处的空白字符，返回 str 的一个副本，不影响字符串本身的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'   a b c  '</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.trim() );<span class="comment">// 'a b c'</span></span><br><span class="line"><span class="built_in">console</span>.log( str ); <span class="comment">// '   abc  '</span></span><br></pre></td></tr></table></figure><h3 id="12-toLowerCase"><a href="#12-toLowerCase" class="headerlink" title="12. toLowerCase()"></a>12. toLowerCase()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.toLowerCase()</span><br></pre></td></tr></table></figure><p>作用：将 str 转换为小写，并返回 str 的一个副本，不影响字符串本身的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'JavaScript'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.toLowerCase() ); <span class="comment">// 'javascript'</span></span><br><span class="line"><span class="built_in">console</span>.log(str);  <span class="comment">// 'JavaScript'</span></span><br></pre></td></tr></table></figure><h3 id="13-toUpperCase"><a href="#13-toUpperCase" class="headerlink" title="13. toUpperCase()"></a>13. toUpperCase()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.toUpperCase()</span><br></pre></td></tr></table></figure><p>作用： 将 str 转换为大写，并返回 str 的一个副本，不影响字符串本身的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'JavaScript'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.toUpperCase() ); <span class="comment">// 'JAVASCRIPT'</span></span><br><span class="line"><span class="built_in">console</span>.log(str);  <span class="comment">// 'JavaScript'</span></span><br></pre></td></tr></table></figure><h3 id="14-repeat"><a href="#14-repeat" class="headerlink" title="14.repeat()"></a>14.repeat()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.repeat(length)</span><br></pre></td></tr></table></figure><p>作用：重复一个str字符串length次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="string">'*'</span>.repeat(<span class="number">3</span>) ); <span class="comment">//***</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'php'</span>.repeat(<span class="number">3</span>) ); <span class="comment">//phpphpphp</span></span><br></pre></td></tr></table></figure><h3 id="15-concat"><a href="#15-concat" class="headerlink" title="15.concat()"></a>15.concat()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.concat(value，...)</span><br></pre></td></tr></table></figure><p>作用：将value与字符串str拼接在一起</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'JavaScript'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.concat(<span class="string">'php'</span>,<span class="string">'mysql'</span>) ); <span class="comment">// JavaScriptphpmysql</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript字符串常用方法&quot;&gt;&lt;a href=&quot;#JavaScript字符串常用方法&quot; class=&quot;headerlink&quot; title=&quot;JavaScript字符串常用方法&quot;&gt;&lt;/a&gt;JavaScript字符串常用方法&lt;/h1&gt;&lt;h2 id=&quot;字符串&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你好</title>
    <link href="http://yoursite.com/2018/12/02/%E4%BD%A0%E5%A5%BD/"/>
    <id>http://yoursite.com/2018/12/02/你好/</id>
    <published>2018-12-02T05:39:03.000Z</published>
    <updated>2018-12-02T05:39:08.873Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="分类1" scheme="http://yoursite.com/categories/%E5%88%86%E7%B1%BB1/"/>
    
      <category term="分类2" scheme="http://yoursite.com/categories/%E5%88%86%E7%B1%BB1/%E5%88%86%E7%B1%BB2/"/>
    
    
      <category term="标签1" scheme="http://yoursite.com/tags/%E6%A0%87%E7%AD%BE1/"/>
    
      <category term="标签2" scheme="http://yoursite.com/tags/%E6%A0%87%E7%AD%BE2/"/>
    
  </entry>
  
</feed>
