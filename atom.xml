<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-17T06:31:10.086Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>高立飞</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>php常用数组方法</title>
    <link href="http://yoursite.com/2018/12/16/PHP%E5%B8%B8%E7%94%A8%E6%95%B0%E7%BB%84/"/>
    <id>http://yoursite.com/2018/12/16/PHP常用数组/</id>
    <published>2018-12-16T10:42:53.000Z</published>
    <updated>2018-12-17T06:31:10.086Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数组的基本函数"><a href="#数组的基本函数" class="headerlink" title="数组的基本函数"></a>数组的基本函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">count($arr)<span class="comment">#获取数组元素的总个数</span></span><br><span class="line">max($arr)<span class="comment">#找出数组中的最大值</span></span><br><span class="line">min($arr)<span class="comment">#找出数组中的最小值</span></span><br><span class="line">    </span><br><span class="line">array_unshift($arr,value)<span class="comment">#在数组第一位中添加元素</span></span><br><span class="line">array_shift($arr)<span class="comment">#删除数组第一位元素</span></span><br><span class="line">array_push($arr,value)<span class="comment">#在数组后面添加新元素(可添加多个)</span></span><br><span class="line">array_pop($arr)<span class="comment">#在数组后面删除一个元素</span></span><br><span class="line"></span><br><span class="line">array_fill($start_index,$num,$value)<span class="comment">#用给定的值填充数组</span></span><br><span class="line">array_slice($array,$offset)<span class="comment">#截取数组中的内容, 返回新数组</span></span><br><span class="line"></span><br><span class="line">array_reverse($arr) <span class="comment">#将元素的顺序颠倒过来,如果存在索引类型下标,将会重置下标从0开始,字符串类型下标,则保存字符串类型下标</span></span><br><span class="line">array_merge($arr1,$arr2)<span class="comment">#合并数组,索引类型下标会被重新规划,关联类型下标不会改变</span></span><br><span class="line">range($start,$end)<span class="comment">#按照指定字符范围构建数组</span></span><br><span class="line">array_values($arr)<span class="comment">#获得数组的值</span></span><br><span class="line">array_keys($arr)<span class="comment">#一次性提取指定数组的所有下标,形成一个新的下标从0开始的索引数组</span></span><br><span class="line">array_flip($arr)<span class="comment">#数组中的值与键名互换（如果有重复前面的会被后面的覆盖）</span></span><br><span class="line">in_array(<span class="string">"value"</span>,$arr)<span class="comment">#在数组中检索value</span></span><br><span class="line">array_search(<span class="string">"value"</span>,$arr)<span class="comment">#在数组中检索value，如果存在返回键名</span></span><br><span class="line">array_key_exists(<span class="string">"key"</span>,$arr)<span class="comment">#检索给定的键名是否存在数组中</span></span><br><span class="line"><span class="keyword">isset</span>($arr[key])<span class="comment">#检索给定的键名是否存在数组中</span></span><br></pre></td></tr></table></figure><h3 id="数组的排序"><a href="#数组的排序" class="headerlink" title="数组的排序"></a>数组的排序</h3><p><code>以元素值对数组排序</code> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sort($arr [,$sort_flags])    <span class="comment">#值 升序 排序,会重置下标从0开始</span></span><br><span class="line">asort($arr [,$sort_flags])    <span class="comment">#值 升序 排序,下标保留原有不变</span></span><br><span class="line">rsort($arr [,$sort_flags])            <span class="comment">#值 降序 排列,会重置下标从0开始</span></span><br><span class="line">arsort($arr [,$sort_flags])            <span class="comment">#值 降序 排列,下标保留原有不变</span></span><br></pre></td></tr></table></figure><p><code>以键名对数组排序</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ksort($arr [,$sort_flags])        <span class="comment">#数组的下标进行 升序 排列</span></span><br><span class="line">krsort($arr [,$sort_flags])        <span class="comment">#数组的下标进行 降序 排列</span></span><br><span class="line">shuffle($arr [,$sort_flags])    <span class="comment">#随机打乱数组值的顺序,会重置下标从0开始自然增长</span></span><br></pre></td></tr></table></figure><p><code>自然排序法</code> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">natsort($arr)                       <span class="comment">#自然排序（忽略键名）</span></span><br><span class="line">natcasesort($arr)                   <span class="comment">#自然排序（忽略大小写，忽略键名）</span></span><br></pre></td></tr></table></figure><h3 id="元素指针函数"><a href="#元素指针函数" class="headerlink" title="元素指针函数"></a>元素指针函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">current($arr)                       <span class="comment">#返回数组中的当前单元</span></span><br><span class="line">pos($arr)    <span class="comment">#返回数组中的当前单元</span></span><br><span class="line">key($arr)    <span class="comment">#返回数组中当前单元的键名</span></span><br><span class="line">prev($arr)                          <span class="comment">#将数组中的内部指针倒回一位</span></span><br><span class="line">next($arr)                          <span class="comment">#将数组中的内部指针向前移动一位</span></span><br><span class="line">end($arr)                           <span class="comment">#将数组中的内部指针指向最后一个单元</span></span><br><span class="line">reset($arr)                         <span class="comment">#将数组中的内部指针指向第一个单元</span></span><br><span class="line">each($arr)                          <span class="comment">#返回数组当前元素一个键名/值的构造数组，并使数组指针向前移动一位</span></span><br><span class="line"><span class="keyword">list</span>($var1,$var2)=$arr              <span class="comment">#把数组中的值赋给一组变量</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数组的基本函数&quot;&gt;&lt;a href=&quot;#数组的基本函数&quot; class=&quot;headerlink&quot; title=&quot;数组的基本函数&quot;&gt;&lt;/a&gt;数组的基本函数&lt;/h3&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="php常用数组" scheme="http://yoursite.com/tags/php%E5%B8%B8%E7%94%A8%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>git常用命令</title>
    <link href="http://yoursite.com/2018/12/04/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/12/04/git常用命令/</id>
    <published>2018-12-04T04:42:53.000Z</published>
    <updated>2018-12-04T04:52:01.773Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/12/04/git常用命令/git常用命令.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/12/04/git常用命令/git常用命令.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="版本控制" scheme="http://yoursite.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>apache设置代理访问nodejs</title>
    <link href="http://yoursite.com/2018/12/02/apache%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AEnodejs/"/>
    <id>http://yoursite.com/2018/12/02/apache设置代理访问nodejs/</id>
    <published>2018-12-02T12:04:34.000Z</published>
    <updated>2018-12-02T14:15:08.757Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-修改apache配置文件httpd-conf，开启以下模块，去掉前面的-号即可："><a href="#1-修改apache配置文件httpd-conf，开启以下模块，去掉前面的-号即可：" class="headerlink" title="1.修改apache配置文件httpd.conf，开启以下模块，去掉前面的#号即可："></a>1.修改apache配置文件httpd.conf，开启以下模块，去掉前面的<code>#</code>号即可：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LoadModule proxy_module modules/mod_proxy.so</span><br><span class="line">LoadModule proxy_http_module modules/mod_proxy_http.so</span><br></pre></td></tr></table></figure><h3 id="2-设置域名：http-www-xxx-com代理nodejs的3000端口服务"><a href="#2-设置域名：http-www-xxx-com代理nodejs的3000端口服务" class="headerlink" title="2.设置域名：http://www.xxx.com代理nodejs的3000端口服务"></a>2.设置域名：<code>http://www.xxx.com</code>代理nodejs的<code>3000</code>端口服务</h3><p>​      修改虚拟主机配置文件：<code>vhosts.conf</code> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:<span class="number">80</span>&gt;</span><br><span class="line">  ServerName www.xxx.com</span><br><span class="line">  ProxyRequests Off</span><br><span class="line">  &lt;Proxy *&gt;</span><br><span class="line">    <span class="keyword">Require</span> all granted  </span><br><span class="line">  &lt;/Proxy&gt;</span><br><span class="line">  &lt;Location /&gt;</span><br><span class="line">    ProxyPass http:<span class="comment">//127.0.0.1:3000/</span></span><br><span class="line">    ProxyPassReverse http:<span class="comment">//127.0.0.1:3000/</span></span><br><span class="line">  &lt;/Location&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><h3 id="3-在电脑中设置hosts文件映射"><a href="#3-在电脑中设置hosts文件映射" class="headerlink" title="3.在电脑中设置hosts文件映射"></a>3.在电脑中设置hosts文件映射</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 api.vueshop.com</span><br></pre></td></tr></table></figure><h3 id="4-开启nodejs的3000端口服务"><a href="#4-开启nodejs的3000端口服务" class="headerlink" title="4.开启nodejs的3000端口服务"></a>4.开启nodejs的3000端口服务</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.end(<span class="string">'代理成功'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="string">"3000"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"请访问 http://127.0.0.1:3000"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="5-浏览器输入http-www-xxx-com访问-看到nodejs中end-响应的结果则表示成功"><a href="#5-浏览器输入http-www-xxx-com访问-看到nodejs中end-响应的结果则表示成功" class="headerlink" title="5.浏览器输入http://www.xxx.com访问,看到nodejs中end()响应的结果则表示成功"></a>5.浏览器输入<code>http://www.xxx.com</code>访问,看到nodejs中end()响应的结果则表示成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代理成功</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-修改apache配置文件httpd-conf，开启以下模块，去掉前面的-号即可：&quot;&gt;&lt;a href=&quot;#1-修改apache配置文件httpd-conf，开启以下模块，去掉前面的-号即可：&quot; class=&quot;headerlink&quot; title=&quot;1.修改apac
      
    
    </summary>
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="apache" scheme="http://yoursite.com/tags/apache/"/>
    
  </entry>
  
  <entry>
    <title>natappp_内网穿透</title>
    <link href="http://yoursite.com/2018/12/02/natappp-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <id>http://yoursite.com/2018/12/02/natappp-内网穿透/</id>
    <published>2018-12-02T11:16:50.000Z</published>
    <updated>2018-12-02T11:28:08.232Z</updated>
    
    <content type="html"><![CDATA[<h3 id="微信公众号开发者模式"><a href="#微信公众号开发者模式" class="headerlink" title="微信公众号开发者模式"></a>微信公众号开发者模式</h3><p>微信公众平台，可以在后台设置自动回复，但有时这个也满足不了我们的需求，可以开启开发模式，把公众号的消息回调到自己的服务器去处理。</p><p>微信公众平台提供了服务器接入的方式，具有开发能力的运营者，可以进行定制开发。</p><p>开发者模式：特别适合企业，所以我们说的微信公众号开发就是说开发者模式的学习与使用。</p><p>==开发者模式需要<strong>一台外网能访问到的服务器</strong>==</p><p><strong>==注意：==</strong>微信公众平台管理中，编辑模式和开发者模式是==互斥的==，也就是说只能使用其中一种。</p><p>开发者模式有2种请求方式：</p><p>==被动==：</p><p><img src="/2018/12/02/natappp-内网穿透/9" alt="1543199906702"></p><p>==主动==：</p><p><img src="/2018/12/02/natappp-内网穿透/10.png" alt="1543199922625"></p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>实际的开发工作中，我们首先需要有一个外网服务器，比如 阿里云、腾讯云、百度云等；而对于我们当前学习测试阶段，我们可以换一种方案代替外网服务器：==内网穿透==。</p><h5 id="内网穿透基本介绍"><a href="#内网穿透基本介绍" class="headerlink" title="内网穿透基本介绍"></a>内网穿透基本介绍</h5><p>natapp软件,它给我们提供一个外网的域名，通过此软件，把我们内网的IP和端口，映射到它自己的服务器上面，这样公众号服务器访问到他们的服务器上面，然后它在转发到我们的内网中，这样就实现了内网的穿透。</p><p>网址：<a href="https://natapp.cn/" target="_blank" rel="noopener">https://natapp.cn/</a></p><p>软件平台，需要注册，注册是免费不花钱的。可以免费使用，需要是成年人并且实名认证。</p><p><img src="/2018/12/02/natappp-内网穿透/16" alt="1543289685702"></p><h5 id="注册natapp"><a href="#注册natapp" class="headerlink" title="注册natapp"></a>注册natapp</h5><ol><li><p>首先进入官网进行注册：</p><p><img src="/2018/12/02/natappp-内网穿透/17" alt="1543289857212"></p><p>注册成功后进行需要进行实名认证：</p><p><img src="/2018/12/02/natappp-内网穿透/18" alt="1543290055619"></p><p>点击后填写信息即可：</p><p><img src="/2018/12/02/natappp-内网穿透/19" alt="1543290511148"></p></li></ol><h5 id="购买隧道"><a href="#购买隧道" class="headerlink" title="购买隧道"></a>购买隧道</h5><ol><li><p>在后台界面点击：购买隧道–》免费隧道</p><p><img src="/2018/12/02/natappp-内网穿透/21" alt="1543290963279"></p><p>填写信息，点击购买：</p><p><img src="/2018/12/02/natappp-内网穿透/20" alt="1543299668463"></p></li><li><p>成功后查看：</p><p><img src="/2018/12/02/natappp-内网穿透/22" alt="1543291116310"></p><p>列表中的==autotoken==是一个非常重要的信息，不要给别人，这就是我们进行内网穿透，的凭证，用此凭证，我们就可以知道其身份，所以不要乱给别人使用，会影响到自己的环境的使用。</p></li></ol><h5 id="本机配置"><a href="#本机配置" class="headerlink" title="本机配置"></a>本机配置</h5><ol><li><p>下载软件：</p><p>软件下载: <a href="https://natapp.cn/#download" target="_blank" rel="noopener">https://natapp.cn/#download</a></p><p><img src="/2018/12/02/natappp-内网穿透/23" alt="1543291335687"></p><p>将软件解压缩：</p><p><img src="/2018/12/02/natappp-内网穿透/24" alt="1543291470046"></p></li><li><p>在解压后的文件夹中新建一个名为config.ini文件，</p><p><img src="/2018/12/02/natappp-内网穿透/25" alt="1543291614473"></p><p>打开后构建如下配置内容：</p><p><img src="/2018/12/02/natappp-内网穿透/26" alt="1543291715483"></p></li><li><p>在apache主配置文件httpd.conf中增加如下配置：</p><p><img src="/2018/12/02/natappp-内网穿透/27" alt="1543299753287"></p><p><img src="/2018/12/02/natappp-内网穿透/28" alt="1543299774986"></p></li><li><p>接着在apache的虚拟主机配置文件中增加如下配置：</p><p><img src="/2018/12/02/natappp-内网穿透/29" alt="1543299925913"></p><p>重启apache，</p><p><img src="/2018/12/02/natappp-内网穿透/30" alt="1543299951683"></p></li><li><p>测试访问项目文件：</p><p>在day1/code目录下创建一个info.php文件，内容如下：</p><p><img src="/2018/12/02/natappp-内网穿透/31" alt="1543300014439"></p><p>然后在浏览器中访问：</p><p><img src="/2018/12/02/natappp-内网穿透/32" alt="1543300046197"></p><p>访问成功！</p></li><li><p>跟着进入natapp.exe所在目录，并且在当前目录下打开cmd黑窗口，</p><p>进入目录：</p><p><img src="/2018/12/02/natappp-内网穿透/33" alt="1543300118293"></p><p>打开黑窗口：</p><p><img src="/2018/12/02/natappp-内网穿透/34" alt="1543300146683"></p><p>在黑窗口中输入natapp后按回车：</p><p>输入：</p><p><img src="/2018/12/02/natappp-内网穿透/35" alt="1543300202624"></p><p>回车后，出现如下界面；==<strong>注意：</strong>不要关闭下面的界面==：</p><p><img src="/2018/12/02/natappp-内网穿透/36" alt="1543300347942"></p></li><li><p>使用远程地址替换本地地址进行测试访问：</p><p><img src="/2018/12/02/natappp-内网穿透/37" alt="1543300457362"></p><p>访问成功，说明配置OK。</p></li></ol><h4 id="下载官方接入代码"><a href="#下载官方接入代码" class="headerlink" title="下载官方接入代码"></a>下载官方接入代码</h4><p>下载地址：<a href="http://t.cn/RkGPhCJ" target="_blank" rel="noopener">http://t.cn/RkGPhCJ</a></p><p><img src="/2018/12/02/natappp-内网穿透/40" alt="1543309403216"></p><p>下载后进行解压：</p><p><img src="/2018/12/02/natappp-内网穿透/41" alt="1543309502497"></p><h4 id="开启开发模式"><a href="#开启开发模式" class="headerlink" title="开启开发模式"></a>开启开发模式</h4><ol><li><p>首先进入后台 设置–》公众号设置   启用开发者密码（点击后将会要求填写相关认证信息）：</p><p><img src="/2018/12/02/natappp-内网穿透/44" alt="1543310037754"></p><p>启用成功后界面效果为：</p><p><img src="/2018/12/02/natappp-内网穿透/45" alt="1543310411131"></p></li><li><p>然后将官方接入程序文件拷贝一份到day1/code目录下，并且改名为wx.php</p><p><img src="/2018/12/02/natappp-内网穿透/46" alt="1543312898271"></p><p>拷贝到day1/code下并改名：</p><p><img src="/2018/12/02/natappp-内网穿透/47" alt="1543312931075"></p><p>wx.php的内容：</p><p><img src="/2018/12/02/natappp-内网穿透/48" alt="1543312988123"></p></li><li><p>继续在该界面点击修改配置，填写相关信息：</p><p>点击：</p><p><img src="/2018/12/02/natappp-内网穿透/49" alt="1543313026174"></p><p>填写信息：</p><p><img src="/2018/12/02/natappp-内网穿透/38" alt="1543312806076"></p></li><li><p>提交后再点击启用按钮启用开发者模式：</p><p><img src="/2018/12/02/natappp-内网穿透/50" alt="1543313078620"></p><p>启用后界面效果为：</p><p><img src="/2018/12/02/natappp-内网穿透/51" alt="1543313103093"></p><p>到此，开发模式就已经开启成功。</p></li></ol><h3 id="微信公众平台测试平台使用"><a href="#微信公众平台测试平台使用" class="headerlink" title="微信公众平台测试平台使用"></a>微信公众平台测试平台使用</h3><p>因为我们使用的订阅号和服务号没有认证，所以很多的接口没有提供给我们，这样在测试的阶段和开发的阶段就没有办法进行了，所以公众号考虑到开发者的此情况的存在，故提供了一个测试平台公众号，用此公众号来开发测试，可以有所有的权限，这样对我们的开发就没有障碍了。但是不包括支付接口。 </p><p>测试平台登陆页面地址（需要扫码登陆）：<a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login</a></p><h4 id="测试平台接入"><a href="#测试平台接入" class="headerlink" title="测试平台接入"></a>测试平台接入</h4><p>登陆平台后，填写接口配置信息并提交：</p><p><img src="/2018/12/02/natappp-内网穿透/52" alt="1543314069508"></p><p><strong>==注意：==</strong>上图中URL地址需要和 公众平台后台开发者模式设置的地址一致；Token也需要保持一致。</p><p>提交后提示成功界面效果如下说明接入测试平台成功：</p><p><img src="/2018/12/02/natappp-内网穿透/53" alt="1543314200184"></p><h4 id="接收普通消息"><a href="#接收普通消息" class="headerlink" title="接收普通消息"></a>接收普通消息</h4><ol><li><p>将day1/code/wx.php中的代码进行调整，构建测试代码：</p><p><img src="/2018/12/02/natappp-内网穿透/54" alt="1543323599745"></p></li><li><p>我们当前使用的是PHP7.x，故将类wechatCallbackapiTest中reponseMsg方法里一句过时的代码改为可用的代码：</p><p><img src="/2018/12/02/natappp-内网穿透/55" alt="1543323702316"></p></li><li><p>扫码关注测试公众号：</p><p><img src="/2018/12/02/natappp-内网穿透/56" alt="1543323745937"></p><p>发送消息，查看测试公众号返回给用户的消息：</p><p><img src="/2018/12/02/natappp-内网穿透/57" alt="1543323899564"></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;微信公众号开发者模式&quot;&gt;&lt;a href=&quot;#微信公众号开发者模式&quot; class=&quot;headerlink&quot; title=&quot;微信公众号开发者模式&quot;&gt;&lt;/a&gt;微信公众号开发者模式&lt;/h3&gt;&lt;p&gt;微信公众平台，可以在后台设置自动回复，但有时这个也满足不了我们的需求，可以开
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="内网穿透" scheme="http://yoursite.com/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>JS字符串常用方法</title>
    <link href="http://yoursite.com/2018/12/02/JavaScript%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/12/02/JavaScript字符串常用方法/</id>
    <published>2018-12-02T05:39:03.000Z</published>
    <updated>2018-12-02T10:55:47.043Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript字符串常用方法"><a href="#JavaScript字符串常用方法" class="headerlink" title="JavaScript字符串常用方法"></a>JavaScript字符串常用方法</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li><p>字符串就是一个或多个排列在一起的字符，放在单引号或双引号之中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'abc'</span></span><br><span class="line"><span class="string">"abc"</span></span><br></pre></td></tr></table></figure></li><li><p><code>length</code>属性<br>js里的字符串类似于数组，都是一个一个字符拼凑在一起组成的，因此可以用<code>length</code>属性取得字符串的长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"hello"</span></span><br><span class="line">str.length;  <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="字符串常用的一些方法"><a href="#字符串常用的一些方法" class="headerlink" title="字符串常用的一些方法"></a>字符串常用的一些方法</h2><h3 id="1-charAt"><a href="#1-charAt" class="headerlink" title="1. charAt()"></a>1. charAt()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.charAt(n)</span><br></pre></td></tr></table></figure><p>作用： 返回字符串的第 n 个字符，如果不在 0~str.length-1之间，则返回一个空字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"javascript"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.charAt(<span class="number">5</span>) ); <span class="comment">// 'c'</span></span><br><span class="line"><span class="built_in">console</span>.log( str.charAt(<span class="number">15</span>) ); <span class="comment">// ''</span></span><br></pre></td></tr></table></figure><h3 id="2-indexOf"><a href="#2-indexOf" class="headerlink" title="2. indexOf()"></a>2. indexOf()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">indexOf(substr[,start])</span><br></pre></td></tr></table></figure><p>作用： 返回 substr 在字符串 str 中首次出现的位置,从 start 位置开始查找，如果不存在，则返回 -1。<br>start可以是任意整数，默认值为 0。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"javascript"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.indexOf(<span class="string">'s'</span>) );   <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log( str.indexOf(<span class="string">'php'</span>,<span class="number">5</span>) ); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log( str.indexOf(<span class="string">'a'</span>,<span class="number">2</span>) );  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="3-lastIndexOf"><a href="#3-lastIndexOf" class="headerlink" title="3. lastIndexOf()"></a>3. lastIndexOf()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lastIndexOf(substr[,start])</span><br></pre></td></tr></table></figure><p>作用： 返回 substr 在字符串 str 中最后出现的位置,从 start 位置 向前开始查找，如果不存在，则返回 -1。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="string">'javascript'</span>.lastIndexOf(<span class="string">'a'</span>) ); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'javascript'</span>.lastIndexOf(<span class="string">'o'</span>) ); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h3 id="4-substring"><a href="#4-substring" class="headerlink" title="4. substring()"></a>4. substring()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.substring(start[, end])</span><br></pre></td></tr></table></figure><p>作用：返回从 start 到 end（不包括）之间的字符，start、end均为 非负整数。若结束参数(end)省略，则表示从start位置一直截取到最后。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'javascript'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.substring(<span class="number">1</span>, <span class="number">4</span>) ); <span class="comment">//"ava"</span></span><br><span class="line"><span class="built_in">console</span>.log( str.substring(<span class="number">1</span>) );  <span class="comment">// "avascript"</span></span><br></pre></td></tr></table></figure><h3 id="5-slice"><a href="#5-slice" class="headerlink" title="5. slice()"></a>5. slice()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.slice(start[,end])</span><br></pre></td></tr></table></figure><p>作用：返回从 start 到 end （不包括）之间的字符，可传负值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'this is awesome'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.slice(<span class="number">1</span>, <span class="number">3</span>) );  <span class="comment">// "hi"</span></span><br><span class="line"><span class="built_in">console</span>.log( str.slice(<span class="number">10</span>, <span class="number">-1</span>) );  <span class="comment">// "esom"</span></span><br><span class="line"><span class="built_in">console</span>.log( str.slice(<span class="number">10</span>, <span class="number">-2</span>) );  <span class="comment">// "eso"</span></span><br></pre></td></tr></table></figure><blockquote><p>从最右边起，字母e为-1，m为-2,依次类推。</p></blockquote><h3 id="6-substr"><a href="#6-substr" class="headerlink" title="6. substr()"></a>6. substr()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.slice(start[,length])</span><br></pre></td></tr></table></figure><p>作用：返回 str 中从指定位置开始到指定长度的子字符串，start可为负值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"javascript"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.substr(<span class="number">5</span>, <span class="number">3</span>) );  <span class="comment">// "cri"</span></span><br><span class="line"><span class="built_in">console</span>.log( str.substr(<span class="number">-4</span>, <span class="number">2</span>) );  <span class="comment">// "ri"</span></span><br></pre></td></tr></table></figure><h3 id="7-replace"><a href="#7-replace" class="headerlink" title="7. replace()"></a>7. replace()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.replace(regexp|substr, newSubStr|<span class="function"><span class="keyword">function</span>)</span></span><br></pre></td></tr></table></figure><p>作用：替换 str 的子字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通替换</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"i love you"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.replace(<span class="string">'love'</span>,<span class="string">'hate'</span>) );  <span class="comment">// "i hate you"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//正则替换</span></span><br><span class="line"><span class="keyword">var</span> tel = <span class="string">'13534566789'</span>; </span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d&#123;3&#125;)\d&#123;4&#125;(\d&#123;4&#125;)/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log( tel.replace(reg,<span class="string">"$1****$2"</span>) );  <span class="comment">// 135****6789</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//驼峰转换</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strCovert</span>(<span class="params">css</span>)</span>&#123;</span><br><span class="line"><span class="comment">//定义一个正则尽可能找到我们要替换的内容</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/-([a-z])/g</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = css.replace(reg,<span class="function"><span class="keyword">function</span>(<span class="params">$<span class="number">0</span>,$<span class="number">1</span></span>)</span>&#123;</span><br><span class="line"><span class="comment">//$0:代表正则匹配的结果</span></span><br><span class="line"><span class="comment">//$1:代表正则匹配的第1个括号中的结果</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'$0:'</span>,$<span class="number">0</span>); <span class="comment">// -b -c </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'$1:'</span>,$<span class="number">1</span>); <span class="comment">// b  c </span></span><br><span class="line"><span class="keyword">return</span> $<span class="number">1.</span>toUpperCase();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> newStr; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> css = <span class="string">'border-bottom-color'</span>; </span><br><span class="line"><span class="built_in">console</span>.log(strCovert(css)); <span class="comment">//"borderBottomColor"</span></span><br></pre></td></tr></table></figure><h3 id="8-search"><a href="#8-search" class="headerlink" title="8. search()"></a>8. search()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.search(regexp)</span><br></pre></td></tr></table></figure><p>作用： 查找 str 与一个正则表达式是否匹配。如果匹配成功，则返回正则表达式在字符串中首次匹配项的索引,否则返回 -1。如果参数传入的是一个非正则表达式对象，则会使用 new RegExp(obj) 隐式地将其转换为正则表达式对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'I love JavaScript!'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.search(<span class="regexp">/java/</span>) ); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log( str.search(<span class="regexp">/Java/</span>) ); <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log( str.search(<span class="regexp">/java/i</span>) ); <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log( str.search(<span class="string">'Java'</span>) ); <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><h3 id="9-match"><a href="#9-match" class="headerlink" title="9. match()"></a>9. match()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.match(regexp)</span><br></pre></td></tr></table></figure><p>作用：返回一个包含匹配结果的数组，如果没有匹配项，则返回 null。如果参数传入的是一个非正则表达式对象，则会使用 new RegExp(obj) 隐式地将其转换为正则表达式对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'Javascript java'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.match(<span class="regexp">/Java/</span>) ); <span class="comment">// ["Java"]</span></span><br><span class="line"><span class="built_in">console</span>.log( str.match(<span class="regexp">/Java/g</span>) ); <span class="comment">// ["Java"]</span></span><br><span class="line"><span class="built_in">console</span>.log( str.match(<span class="regexp">/Java/gi</span>) ); <span class="comment">// ["java", "Java"]</span></span><br><span class="line"><span class="built_in">console</span>.log( str.match(<span class="regexp">/ab/g</span>) ); <span class="comment">// null</span></span><br></pre></td></tr></table></figure><h3 id="10-split"><a href="#10-split" class="headerlink" title="10. split()"></a>10. split()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.split([delimiter][, limit])</span><br></pre></td></tr></table></figure><p>作用：返回一个数组，分隔符delimiter 可以是一个字符串或正则表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Hello?World!"</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str .split() ); <span class="comment">// ["Hello?World!"]</span></span><br><span class="line"><span class="built_in">console</span>.log( str.split(<span class="string">'?'</span>) ); <span class="comment">// ["Hello", "World!"]</span></span><br><span class="line"><span class="built_in">console</span>.log( str.split(<span class="string">''</span>) ); <span class="comment">// ["H", "e", "l", "l", "o", "?", "W", "o", "r", "l", "d", "!"]</span></span><br><span class="line"><span class="built_in">console</span>.log( str.split(<span class="string">''</span>,<span class="number">5</span>) ); <span class="comment">// ["H", "e", "l", "l", "o"]</span></span><br><span class="line"><span class="built_in">console</span>.log( str.split(<span class="regexp">/\?/</span>) ); <span class="comment">// ["Hello", "World!"]</span></span><br></pre></td></tr></table></figure><h3 id="11-trim"><a href="#11-trim" class="headerlink" title="11. trim()"></a>11. trim()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.trim()</span><br></pre></td></tr></table></figure><p>作用：去除 str 开头和结尾处的空白字符，返回 str 的一个副本，不影响字符串本身的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'   a b c  '</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.trim() );<span class="comment">// 'a b c'</span></span><br><span class="line"><span class="built_in">console</span>.log( str ); <span class="comment">// '   abc  '</span></span><br></pre></td></tr></table></figure><h3 id="12-toLowerCase"><a href="#12-toLowerCase" class="headerlink" title="12. toLowerCase()"></a>12. toLowerCase()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.toLowerCase()</span><br></pre></td></tr></table></figure><p>作用：将 str 转换为小写，并返回 str 的一个副本，不影响字符串本身的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'JavaScript'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.toLowerCase() ); <span class="comment">// 'javascript'</span></span><br><span class="line"><span class="built_in">console</span>.log(str);  <span class="comment">// 'JavaScript'</span></span><br></pre></td></tr></table></figure><h3 id="13-toUpperCase"><a href="#13-toUpperCase" class="headerlink" title="13. toUpperCase()"></a>13. toUpperCase()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.toUpperCase()</span><br></pre></td></tr></table></figure><p>作用： 将 str 转换为大写，并返回 str 的一个副本，不影响字符串本身的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'JavaScript'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.toUpperCase() ); <span class="comment">// 'JAVASCRIPT'</span></span><br><span class="line"><span class="built_in">console</span>.log(str);  <span class="comment">// 'JavaScript'</span></span><br></pre></td></tr></table></figure><h3 id="14-repeat"><a href="#14-repeat" class="headerlink" title="14.repeat()"></a>14.repeat()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.repeat(length)</span><br></pre></td></tr></table></figure><p>作用：重复一个str字符串length次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( <span class="string">'*'</span>.repeat(<span class="number">3</span>) ); <span class="comment">//***</span></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'php'</span>.repeat(<span class="number">3</span>) ); <span class="comment">//phpphpphp</span></span><br></pre></td></tr></table></figure><h3 id="15-concat"><a href="#15-concat" class="headerlink" title="15.concat()"></a>15.concat()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.concat(value，...)</span><br></pre></td></tr></table></figure><p>作用：将value与字符串str拼接在一起</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'JavaScript'</span>;</span><br><span class="line"><span class="built_in">console</span>.log( str.concat(<span class="string">'php'</span>,<span class="string">'mysql'</span>) ); <span class="comment">// JavaScriptphpmysql</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript字符串常用方法&quot;&gt;&lt;a href=&quot;#JavaScript字符串常用方法&quot; class=&quot;headerlink&quot; title=&quot;JavaScript字符串常用方法&quot;&gt;&lt;/a&gt;JavaScript字符串常用方法&lt;/h1&gt;&lt;h2 id=&quot;字符串&quot;&gt;
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js字符串" scheme="http://yoursite.com/tags/js%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>JS数组常用方法</title>
    <link href="http://yoursite.com/2018/12/02/JavaScript%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2018/12/02/JavaScript数组常用方法/</id>
    <published>2018-12-02T05:39:03.000Z</published>
    <updated>2018-12-11T05:39:58.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript数组常用方法"><a href="#JavaScript数组常用方法" class="headerlink" title="JavaScript数组常用方法"></a>JavaScript数组常用方法</h1><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li><p>所谓数组，就是一堆数据的集合（容器），里面存放各种各样的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br></pre></td></tr></table></figure></li><li><p><code>length</code>属性<br>可以用<code>length</code>属性取得数组(集合)的长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line">arr.length; <span class="comment">// 3  返回3，说明数组有三个元素</span></span><br></pre></td></tr></table></figure></li><li><p>数组下标</p><p>数组中每个元素都有对应的标号指向它，这个标号我们可以称之为<code>下标</code></p><p>下标从0开始，数组中的第1个元素下标为0，第2个元素下标为1，依次类推。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line">arr[<span class="number">0</span>]; <span class="comment">// 'a'</span></span><br><span class="line">arr[<span class="number">1</span>]; <span class="comment">// 'b'</span></span><br><span class="line">arr[<span class="number">2</span>]; <span class="comment">// 'c'</span></span><br></pre></td></tr></table></figure><blockquote><p>当通过不存在的下标获取值则得到一个undefined值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line">arr[<span class="number">4</span>]; <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.join(separator)</span><br></pre></td></tr></table></figure><p>作用：把数组中的每个元素用分隔符separator进行连接起来，返回一个字符串。如果省略了这个参数，默认使用逗号作为分隔符 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.join(<span class="string">'-'</span>) );  <span class="comment">// 'a-b-c'</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.join(<span class="string">''</span>) );  <span class="comment">// 'abc'</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.join() );  <span class="comment">// 'a,b,c'</span></span><br></pre></td></tr></table></figure><h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.pop()</span><br></pre></td></tr></table></figure><p>作用： 将删除arr的最后一个元素，把数组长度减1，并且返回它删除的元素的值。如果数组已经为空，则pop()不改变数组，返回undefined。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( arr.pop() ); <span class="comment">// c</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.pop() ); <span class="comment">// b</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.pop() ); <span class="comment">// a</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.pop() ); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.push(value,...)</span><br></pre></td></tr></table></figure><p>作用：向数组尾部添加一个或多个元素 ，成功返回数组的新长度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.push(<span class="string">'d'</span>) ); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.push(<span class="string">'e'</span>,<span class="string">'f'</span>) ); <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//["a", "b", "c", "d", "e", "f"]</span></span><br></pre></td></tr></table></figure><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.unshift(value,...)</span><br></pre></td></tr></table></figure><p>作用：向数组头部添加一个或多个元素 ，成功返回数组的新长度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.unshift(<span class="string">'d'</span>) ); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.unshift(<span class="string">'e'</span>,<span class="string">'f'</span>) ); <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["e", "f", "d", "a", "b", "c"]</span></span><br></pre></td></tr></table></figure><h3 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.shift()</span><br></pre></td></tr></table></figure><p>作用：方法shift()将把arr的第—个元素移出数组，b并返回那个元素的值，并且将余下的所有元素前移一位，以填补数组头部的空缺 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.shift(<span class="string">'d'</span>) ); <span class="comment">// 'a'</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["b", "c"]</span></span><br></pre></td></tr></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.sort(callback)</span><br></pre></td></tr></table></figure><p>作用：对数组进行排序，指定d回调函数callback进行排序。</p><p>返回值：对数组的引用。注意，数组在原数组上进行排序，不制作副本。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">14</span>,<span class="number">8</span>,<span class="number">24</span>];</span><br><span class="line">arr.sort( <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> a-b; <span class="comment">// 或return  a&gt;b   </span></span><br><span class="line">&#125;) ;  </span><br><span class="line"><span class="built_in">console</span>.log(arr);  <span class="comment">// [8, 14, 24]  升序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">14</span>,<span class="number">8</span>,<span class="number">24</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> b-a; <span class="comment">//  或return b&gt;a  </span></span><br><span class="line">&#125;) ;  </span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[24, 14, 8] 降序</span></span><br></pre></td></tr></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.slice(start,[,end])</span><br></pre></td></tr></table></figure><p>作用：截取数组长度。从下标start开始，到end（不包括该元素）下标结束，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.slice(<span class="number">2</span>,<span class="number">4</span>)); <span class="comment">// [3,4]</span></span><br></pre></td></tr></table></figure><p>若没有写end结束下标，则截取到数组末尾。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.slice(<span class="number">2</span>)); <span class="comment">// [3,4,5]</span></span><br></pre></td></tr></table></figure><p>若end为负数，则从数组尾部开始截取，即-1指最后一个元素，-2指倒数第二个元素，以此类推 。</p><blockquote><p>注：不包括最后一个元素。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.slice(<span class="number">2</span>,<span class="number">-1</span>)); <span class="comment">// [3,4]</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.slice(<span class="number">2</span>,<span class="number">-2</span>)); <span class="comment">// [3]</span></span><br></pre></td></tr></table></figure><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.toString()</span><br></pre></td></tr></table></figure><p>作用： 把数组转为用逗号连接的字符串表示。类似<code>arr.join()</code>效果一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.toString() ); <span class="comment">// '1,2,3,4,5'</span></span><br><span class="line"><span class="built_in">console</span>.log( arr.join() ); <span class="comment">// '1,2,3,4,5'</span></span><br></pre></td></tr></table></figure><h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.splice(start, deleteCount, value, ...)</span><br></pre></td></tr></table></figure><p>参数</p><ul><li><p>start</p><p>开始插入和(或)删除的数组元素的下标 </p></li><li><p>deleteCount</p><p>从start开始，包括start所指的元素在内要删除的元素个数。这个参数是可选的，如果没有指定它，splice()将删除从start开始到原数组结尾的所有元素。 </p></li><li><p>value</p><p>要插人数组的零个或多个值，从start所指的下标处开始插入 </p></li></ul><p>返回值</p><p>​    如果从arr中删除了元素，返回的是含有被删除的元素的数组。 </p><p>例1：从下标2开始删除后面所有的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.splice(<span class="number">2</span>) ); <span class="comment">// [3,4,5]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">// [1,2]</span></span><br></pre></td></tr></table></figure><p>例2：从下标2开始删除后面的2个元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.splice(<span class="number">2</span>,<span class="number">2</span>) ); <span class="comment">// [3,4]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">// [1,2,5]</span></span><br></pre></td></tr></table></figure><p>例3：从下标2开始删除后面的2个元素,同时在start指定的下标2后面加一个元素new</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.splice(<span class="number">2</span>,<span class="number">2</span>,<span class="string">'new'</span>) ); <span class="comment">// [3,4]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">// [1,2,'new',5]</span></span><br></pre></td></tr></table></figure><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.reverse()</span><br></pre></td></tr></table></figure><p>作用：颠倒数组中元素的顺序,返回新的颠倒后的数组元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.reverse() ); <span class="comment">// [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><h3 id="isArray"><a href="#isArray" class="headerlink" title="isArray()"></a>isArray()</h3><p>作用：检测一个变量是否是数组。（typeof不行,返回的是object）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) == <span class="string">'[object Array]'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(isArray(arr)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isArray(&#123;&#125;)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>同理：</p><p>​    判断是否是对象使用<code>[object object]</code></p><p>​    是否是字符串 <code>[object string]</code></p><p>​    以此类推</p><h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h3><p>作用：连接多个数组，返回新的数组 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr1.concat(arr2) ); <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach()"></a>foreach()</h3><p>作用：遍历数组元素 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v,key</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//v当前循环的元素 key当前元素的下标</span></span><br><span class="line">    <span class="built_in">console</span>.log(key,v)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 &quot;a&quot;</span><br><span class="line">1 &quot;b&quot;</span><br><span class="line">2 &quot;c&quot;</span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h3><p>作用：过滤数组中的某些元素，在回调函数中设置条件，不满足的都会被过滤掉，返回一个新数组。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = [<span class="number">18</span>,<span class="number">23</span>,<span class="number">28</span>,<span class="number">30</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = age.filter(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//v当前循环的元素</span></span><br><span class="line">    <span class="comment">//返回年龄大于25的元素</span></span><br><span class="line">    <span class="keyword">return</span> v&gt;<span class="number">25</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newArr);<span class="comment">// [28, 30]</span></span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h3><p>作用：遍历数组，数组里的元素经过指定回调函数进行加工处理。  返回一个新的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = [<span class="number">18</span>,<span class="number">23</span>,<span class="number">28</span>,<span class="number">30</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = age.map(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//给每个元素加10岁</span></span><br><span class="line">    <span class="keyword">return</span> v+<span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [28, 33, 38, 40]</span></span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h3><p>reduce方法有两个参数，第一个参数是一个callback，用于针对数组项的操作；第二个参数则是传入的初始值，这个初始值用于单个数组项的操作。需要注意的是，reduce方法返回值并不是数组，而是返回经过叠加处理后的结果。</p><p>reduce方法最常见的场景就是叠加 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> items = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">sum,item</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//item数组值的每个元素</span></span><br><span class="line">    <span class="comment">//sum每次累加的和</span></span><br><span class="line">    <span class="keyword">return</span> sum+item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> total = items.reduce(callback,<span class="number">0</span>); <span class="comment">//把循环完后的累加结果加0</span></span><br><span class="line"><span class="built_in">console</span>.log(total); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><p>方式有很多种。</p><ul><li>用es6的Set对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</span><br><span class="line"><span class="keyword">var</span> newArr = <span class="built_in">Array</span>.from(set);</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>更骚气的用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr = [...new <span class="built_in">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>])]</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><ul><li>另indexOf方法来判断，存在返回元素下标，不存在返回-1</li></ul><p>建立一个存放结果的数组，利用indexOf判断是否存在于新数组中，不存在则push到新数组，最后返回新数组 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> unique = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = []; <span class="comment">// 存放已遍历的满足条件的元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">// indexOf()判断当前元素是否已存在</span></span><br><span class="line">        <span class="keyword">if</span> (n.indexOf(arr[i]) == <span class="number">-1</span>) n.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log( unique(arr) ); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>如果想arr.unique()这样调用，则需要把此方法加上Array的原型对象上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = []; <span class="comment">// 存放已遍历的满足条件的元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="comment">// indexOf()判断当前元素是否已存在</span></span><br><span class="line">        <span class="keyword">if</span> (n.indexOf(<span class="keyword">this</span>[i]) == <span class="number">-1</span>) n.push(<span class="keyword">this</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">6</span>];</span><br><span class="line"><span class="built_in">console</span>.log( arr.unique() );  <span class="comment">// [1, 2, 3, 6]</span></span><br></pre></td></tr></table></figure><h3 id="数组中是否存在于某个值"><a href="#数组中是否存在于某个值" class="headerlink" title="数组中是否存在于某个值"></a>数组中是否存在于某个值</h3><p>可以用indexOf方法来判断，存在返回元素下标，不存在返回-1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inArray</span>(<span class="params">value,arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.indexOf(value)!== <span class="number">-1</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log( inArray(<span class="number">2</span>,arr) ); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log( inArray(<span class="number">4</span>,arr) ); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaScript数组常用方法&quot;&gt;&lt;a href=&quot;#JavaScript数组常用方法&quot; class=&quot;headerlink&quot; title=&quot;JavaScript数组常用方法&quot;&gt;&lt;/a&gt;JavaScript数组常用方法&lt;/h1&gt;&lt;h3 id=&quot;数组&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js数组" scheme="http://yoursite.com/tags/js%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
</feed>
